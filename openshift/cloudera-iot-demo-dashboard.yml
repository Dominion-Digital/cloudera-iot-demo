apiVersion: v1
kind: Template
metadata:
  annotations:
    description: Red Hat IoT Demo Application Template - TEMP
    iconClass: icon-shadowman
    tags: jboss,iot,kapua,kura,eclipse
  name: iot-cloudera-demo

parameters:
- name: JOLOKIA_PASSWORD
  description: The password used for the Jolokia endpoint authentication
  generate: expression
  from: '[a-zA-Z0-9]{15}'
  required: true
- name: JOLOKIA_USER
  description: The username used for the Jolokia endpoint authentication
  value: jolokia
- description: Maven mirror url. If nexus is deployed locally, use nexus url (e.g. http://nexus.ci:8081/content/groups/public/)
  displayName: Maven mirror url
  name: MAVEN_MIRROR_URL
  required: false
- description: MQ cluster password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: MQ_CLUSTER_PASSWORD
  required: true
- description: JGroups cluster password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: JGROUPS_CLUSTER_PASSWORD
  required: true
- description: Git source URI for application
  name: GIT_URI
  required: true
  value: https://github.com/redhat-iot/cloudera-iot-demo
- description: Git branch/tag reference
  name: GIT_REF
  value: master
- description: MQ Broker username
  name: BROKER_USERNAME
  value: "demo-gw2"
  required: true
- description: MQ Broker password
  name: BROKER_PASSWORD
  value: "RedHat123"
  required: true
- description: OpenShift load-balanced MQ Broker service name
  name: BROKER_WS_NAME
  value: "broker"
  required: true
- description: Name of datastore proxy service
  name: DASHBOARD_PROXY_SERVICE
  value: "dashboard-proxy"
  required: true
- description: API Key for Google Maps
  name: GOOGLE_MAPS_API_KEY
  value: "AIzaSyDpDtvyzzdXDYk5nt6CuOtjxmvBvwGq5D4"
  required: false
- description: Datastore username
  name: DATASTORE_USERNAME
  value: "rhiot"
  required: true
- description: Datastore password
  name: DATASTORE_PASSWORD
  value: "redhatiot1!"
  required: true
- description: Datastore service hostname
  name: DATASTORE_HOST
  value: "datastore-hotrod"
  required: true
- description: Datastore port
  name: DATASTORE_PORT
  value: "11333"
  required: true
- description: Datastore password
  name: DATASTORE_CACHE
  value: "customer,facility,lines,machines,runs,calendar"
  required: true
- description: Datastore password
  name: ADDITIONAL_SENSOR_IDS
  required: false
- description: Displayed title of web dashboard
  name: DASHBOARD_WEB_TITLE
  value: "IoT Industry 4.0 Demo"
  required: true
- description: Cloudera Impala service hostname
  name: IMPALA_HOST
  value: "34.211.218.209"
  required: true
- description: Cloudera Impala service port
  name: IMPALA_PORT
  value: "21050"
  required: true
- description: Cloudera Kafka service hostname
  name: KAFKA_ALERTS_HOST
  value: "34.208.144.34"
  required: true
- description: Cloudera Kafka service port
  name: KAFKA_ALERTS_PORT
  value: "9092"
  required: true
- description: Cloudera Kafka service topic
  name: KAFKA_ALERTS_TOPIC_REGEX
  value: "Red-Hat/[^/]*/[^/]*/facilities/[^/]*/lines/[^/]*/machines/[^/]*/alerts"
  required: true
labels:
  demo: iot-cloudera-demo

objects:

# UI and JDG

#
# Image Streams
#
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: dashboard
  spec:
    tags:
      - name: latest
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: dashboard-proxy
  spec:
    tags:
      - name: latest

#
# Build Configs
#
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: dashboard
    labels:
      application: dashboard
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: dashboard:latest
    source:
      contextDir: dashboard
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: nodejs:4
          namespace: openshift
      type: Source
    triggers:
    - imageChange: {}
      type: ImageChange
    - type: ConfigChange

- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: dashboard-proxy
    labels:
      application: dashboard-proxy
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: dashboard-proxy:latest
    source:
      contextDir: dashboard-proxy
      git:
        ref: ${GIT_REF}
        uri: ${GIT_URI}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: MAVEN_MIRROR_URL
          value: ${MAVEN_MIRROR_URL}
        from:
          kind: ImageStreamTag
          name: wildfly:10.1
          namespace: openshift
      type: Source
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange

#
# Angular Dashboard deployment
#
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: dashboard
    name: dashboard
  spec:
    replicas: 1
    selector:
      deploymentconfig: dashboard
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: dashboard
          deploymentconfig: dashboard
      spec:
        containers:
        - env:
          - name: BROKER_WS_NAME
            value: ${BROKER_WS_NAME}
          - name: BROKER_USERNAME
            value: ${BROKER_USERNAME}
          - name: BROKER_PASSWORD
            value: ${BROKER_PASSWORD}
          - name: DASHBOARD_PROXY_SERVICE
            value: ${DASHBOARD_PROXY_SERVICE}
          - name: GOOGLE_MAPS_API_KEY
            value: ${GOOGLE_MAPS_API_KEY}
          - name: DASHBOARD_WEB_TITLE
            value: ${DASHBOARD_WEB_TITLE}
          image: dashboard
          imagePullPolicy: Always
          name: dashboard
          ports:
          - containerPort: 8080
            protocol: TCP
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 10
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - dashboard
        from:
          kind: ImageStreamTag
          name: dashboard:latest
      type: ImageChange
    - type: ConfigChange

#
# Datastore (Infinispan) Deployment Config
#
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: datastore
      application: datastore
    name: datastore
  spec:
    replicas: 1
    selector:
      deploymentConfig: datastore
    strategy:
      recreateParams:
        timeoutSeconds: 600
      type: Recreate
    template:
      metadata:
        labels:
          application: datastore
          deploymentConfig: datastore
        name: datastore
      spec:
        containers:
        - env:
          - name: USERNAME
            value: ${DATASTORE_USERNAME}
          - name: PASSWORD
            value: ${DATASTORE_PASSWORD}
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=datastore
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: INFINISPAN_CONNECTORS
            value: hotrod,rest
          - name: CACHE_NAMES
            value: ${DATASTORE_CACHE}
          - name: DATAVIRT_CACHE_NAMES
          - name: ENCRYPTION_REQUIRE_SSL_CLIENT_AUTH
          - name: HOTROD_SERVICE_NAME
            value: ${DATASTORE_HOST}
          - name: MEMCACHED_CACHE
            value: default
          - name: REST_SECURITY_DOMAIN
          - name: JGROUPS_CLUSTER_PASSWORD
            value: ${JGROUPS_CLUSTER_PASSWORD}
          image: registry.access.redhat.com/jboss-datagrid-6/datagrid65-openshift:1.4
          imagePullPolicy: IfNotPresent
          name: datastore
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          - containerPort: 11211
            name: memcached
            protocol: TCP
          - containerPort: 11222
            name: hotrod
            protocol: TCP
          - containerPort: 11333
            name: hotrod3
            protocol: TCP
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 60
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - datastore
        from:
          kind: ImageStreamTag
          name: jboss-datagrid65-openshift:1.4
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}

#
# Dashboard Proxy Deployment Config
#
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: dashboard-proxy
      application: dashboard-proxy
    name: dashboard-proxy
  spec:
    replicas: 1
    selector:
      deploymentConfig: dashboard-proxy
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          application: dashboard-proxy
          deploymentConfig: dashboard-proxy
        name: dashboard-proxy
      spec:
        containers:
        - env:
          - name: OPENSHIFT_KUBE_PING_LABELS
            value: application=dashboard-proxy
          - name: OPENSHIFT_KUBE_PING_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: MQ_CLUSTER_PASSWORD
            value: ${MQ_CLUSTER_PASSWORD}
          - name: JGROUPS_CLUSTER_PASSWORD
            value: ${JGROUPS_CLUSTER_PASSWORD}
          - name: AUTO_DEPLOY_EXPLODED
            value: "false"
          - name: DATASTORE_HOST
            value: ${DATASTORE_HOST}
          - name: DATASTORE_PORT
            value: ${DATASTORE_PORT}
          - name: DATASTORE_CACHE
            value: ${DATASTORE_CACHE}
          - name: BROKER_USERNAME
            value: ${BROKER_USERNAME}
          - name: BROKER_PASSWORD
            value: ${BROKER_PASSWORD}
          - name: ADDITIONAL_SENSOR_IDS
            value: ${ADDITIONAL_SENSOR_IDS}
          - name: KAFKA_ALERTS_HOST
            value: ${KAFKA_ALERTS_HOST}
          - name: KAFKA_ALERTS_PORT
            value: ${KAFKA_ALERTS_PORT}
          - name: KAFKA_ALERTS_TOPIC_REGEX
            value: ${KAFKA_ALERTS_TOPIC_REGEX}
          - name: IMPALA_HOST
            value: ${IMPALA_HOST}
          - name: IMPALA_PORT
            value: ${IMPALA_PORT}
          image: dashboard-proxy
          imagePullPolicy: Always
          name: dashboard-proxy
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8888
            name: ping
            protocol: TCP
          resources: {}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/utils/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 5
            httpGet:
              path: /api/utils/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          terminationMessagePath: /dev/termination-log
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 3
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - dashboard-proxy
        from:
          kind: ImageStreamTag
          name: dashboard-proxy:latest
      type: ImageChange
    - type: ConfigChange
  status: {}

#
# Services
#
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: dashboard
    name: dashboard
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentconfig: dashboard
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: datastore
    name: ${DATASTORE_HOST}
  spec:
    ports:
    - port: 11333
      protocol: TCP
      targetPort: 11333
    selector:
      deploymentConfig: datastore
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: dashboard-proxy
    name: dashboard-proxy
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      deploymentConfig: dashboard-proxy
    sessionAffinity: None
    type: ClusterIP

#
# Routes
#
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: dashboard
    name: dashboard
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: dashboard
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      application: dashboard-proxy
    name: dashboard-proxy
  spec:
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: dashboard-proxy

